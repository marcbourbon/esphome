substitutions:
  #name: bms-maison
  name: bms-jardin
  device_description: "Monitor and control a JK-BMS v11 via bluetooth"
  external_components_source: github://syssi/esphome-jk-bms@main
  # Please use "JK02_24S" if you own a old JK-BMS < hardware version 11.0 (hardware version >= 6.0 and < 11.0)
  # Please use "JK02_32S" if you own a new JK-BMS >= hardware version 11.0 (f.e. JK-B2A8S20P hw 11.XW, sw 11.26)
  # Please use "JK04" if you have some old JK-BMS <= hardware version 3.0 (f.e. JK-B2A16S hw 3.0, sw. 3.3.0)
  protocol_version: JK02_32S

  mac_address: C8:47:80:1B:51:14 # bms jardin
  #mac_address: 98:DA:20:06:45:48 # bms maison

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.6.0
  project:
    name: "syssi.esphome-jk-bms"
    version: 2.1.0
  platformio_options:
    build_flags: -DBOARD_HAS_PSRAM
    board_build.arduino.memory_type: qio_opi
    board_build.f_flash: 80000000L
    board_build.flash_mode: qio 
    # board_build.partitions: huge_app.csv

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

external_components:
  - source: ${external_components_source}
    refresh: 0s

wifi:
  networks:
    - ssid: "Livebox-8930"
      password: "tomemy0123456789"
    - ssid: "TP-Link_6444"
      password: "24046435"
    - ssid: "TP-Link_6C06"
      password: "12731978"

ota:
  platform: esphome
  on_begin:
    then:
      - switch.turn_off: ble_client_switch0
      - logger.log: "BLE connection suspended for OTA update"

logger:
  level: WARN
  logs:
     esp32_ble_tracker: WARN
     esp32_ble_client: WARN

api:
  reboot_timeout: 0s

mqtt:
   broker: domohub.local
   username: "marc"
   password: "tomemy"
   id: "jkbmstest"

web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Paris" # Adaptez à votre fuseau horaire

esp32_ble_tracker:
  scan_parameters:
    # interval: 1100ms
    # window: 110ms
    active: false

ble_client:
  - mac_address: ${mac_address}
    id: client0

jk_bms_ble:
  - ble_client_id: client0
    protocol_version: ${protocol_version}
    throttle: 10s
    id: bms0

button:
  - platform: jk_bms_ble
    # retrieve_settings:
    #   name: "${name} retrieve settings"
    # retrieve_device_info:
    #   name: "${name} retrieve device info"
  - platform: restart
    name: "Reboot"
    id: solarrestart

number:
  - platform: template
    name: "10_IDX Delta Cell Voltage"
    id: idx_delta_cell_voltage
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_delta_cell_voltage).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Delta Cell Voltage: %d", new_value);

  - platform: template
    name: "11_IDX Total Voltage"
    id: idx_total_voltage
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_total_voltage).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Total Voltage: %d", new_value);

  - platform: template
    name: "12_IDX Current"
    id: idx_current
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_current).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Current: %d", new_value);

  - platform: template
    name: "13_IDX Power"
    id: idx_power
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_power).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Power: %d", new_value);

  - platform: template
    name: "14_IDX Température Sensor 1"
    id: idx_temperature_sensor_1
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_temperature_sensor_1).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Température Sensor 1: %d", new_value);

  - platform: template
    name: "15_IDX Température Sensor 2"
    id: idx_temperature_sensor_2
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_temperature_sensor_2).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX Température Sensor 2: %d", new_value);
  
  - platform: template
    name: "16_IDX State of Charge"
    id: idx_state_of_charge
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_state_of_charge).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX State of Charge: %d", new_value);

  - platform: template
    name: "17_IDX GPIO RELAIS AC"
    id: idx_gpio_AC_IN
    min_value: 0
    max_value: 9999
    step: 1
    mode: box
    restore_value: true
    set_action:
      - lambda: |-
          int new_value = static_cast<int>(round(x));
          id(idx_gpio_AC_IN).publish_state(new_value);
          ESP_LOGI("IDX", "Nouvelle valeur sauvegardée IDX State of Charge: %d", new_value);

sensor:
  - platform: template
    name: "ESP32 Free Heap"
    lambda: |-
      return (float) ESP.getFreeHeap();
    update_interval: 60s    
  - platform: uptime
    name: "Temps de fonctionnement"
    id: uptime_sensor
  - platform: wifi_signal
    name: "09_WiFi Signal Strength"
    update_interval: 60s
  - platform: jk_bms_ble
    jk_bms_ble_id: bms0
  - platform: jk_bms_ble
    jk_bms_ble_id: bms0

    delta_cell_voltage:
      name: "01_delta cell voltage"
      id: id_delta_cell_voltage 
      on_value:
        - lambda: |-
            if (id(idx_delta_cell_voltage).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_delta_cell_voltage).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_delta_cell_voltage).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Delta Cell Voltage = 0, publication annulée.");
            }
   
    total_voltage:
      name: "02_total voltage"
      id: id_total_voltage 
      on_value:
        - lambda: |-
            if (id(idx_total_voltage).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_total_voltage).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_total_voltage).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Total Voltage = 0, publication annulée.");
            }

    current:
      name: "03_current"
      id: id_current
      on_value:
        - lambda: |-
            if (id(idx_current).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_current).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_current).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Current = 0, publication annulée.");
            }

    power:
      name: "04_power"
      id: id_power
      on_value:
        - lambda: |-
            if (id(idx_power).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_power).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_power).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Power = 0, publication annulée.");
            }

    temperature_sensor_1:
      name: "05_temperature sensor 1"
      id: id_temperature_sensor_1
      on_value:
        - lambda: |-
            if (id(idx_temperature_sensor_1).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_temperature_sensor_1).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_temperature_sensor_1).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Température 1 = 0, publication annulée.");
            }

    temperature_sensor_2:
      name: "06_temperature sensor 2"
      id: id_temperature_sensor_2
      on_value:
        - lambda: |-
            if (id(idx_temperature_sensor_2).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_temperature_sensor_2).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_temperature_sensor_2).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX Température 2 = 0, publication annulée.");
            }

    state_of_charge:
      name: "07_state of charge"
      id: id_state_of_charge
      on_value:
        - lambda: |-
            if (id(idx_state_of_charge).state != 0) {
              mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
                root["command"] = "udevice";
                root["idx"] = id(idx_state_of_charge).state;
                root["nvalue"] = 0;
                root["svalue"] = std::to_string(id(id_state_of_charge).state);
              });
            } else {
              ESP_LOGI("MQTT", "IDX State of charge = 0, publication annulée.");
            }

    capacity_remaining:
      name: "08_capacity remaining"
      id: id_capacity_remaining
    
    charging_cycles:
      name: "${name} charging cycles"

text_sensor:
  - platform: template
    name: "Temps de fonctionnement formaté"
    id: uptime_formatted
    lambda: |-
      int uptime_seconds = id(uptime_sensor).state;
      int hours = uptime_seconds / 3600;
      int minutes = (uptime_seconds % 3600) / 60;
      char uptime_str[10];
      snprintf(uptime_str, sizeof(uptime_str), "%02dh%02dm", hours, minutes);
      return std::string(uptime_str);
    
  - platform: wifi_info
    ip_address:
      name: "ESP IP Address"

  - platform: template
    name: "Current Time"
    id: current_time
    lambda: |-
      char buffer[9]; // Buffer to hold the time string
      auto now = id(sntp_time).now();
      snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d",
               now.hour,
               now.minute,
               now.second);
      return std::string(buffer);
    update_interval: 60s

switch:
  - platform: jk_bms_ble

  - platform: ble_client
    ble_client_id: client0
    id: ble_client_switch0
    # name: "${name} enable bluetooth connection"
#------------------------------------------------------------------------------------------------------
# a décommenter pour bms-maison
#------------------------------------------------------------------------------------------------------
#   - platform: gpio
#     pin: 1
#     name: "Relais AC"
#     id: id_relais_AC
#     inverted: false    
#     # État initial du GPIO
#     # Mode de restauration après redémarrage
#     restore_mode: RESTORE_DEFAULT_ON
#     on_turn_on:
#         - lambda: |-
#             if (id(idx_delta_cell_voltage).state != 0) {
#               mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
#                 root["command"] = "udevice";
#                 root["idx"] = id(idx_gpio_AC_IN).state;
#                 root["nvalue"] = 0;
#                 root["svalue"] = 1;
#               });
#             } else {
#               ESP_LOGI("MQTT", "IDX relais AC = 0, publication annulée.");
#             }
#     on_turn_off:
#         - lambda: |-
#             if (id(idx_delta_cell_voltage).state != 0) {
#               mqtt::global_mqtt_client->publish_json("domoticz/in", [](JsonObject root) {
#                 root["command"] = "udevice";
#                 root["idx"] = id(idx_gpio_AC_IN).state;
#                 root["nvalue"] = 0;
#                 root["svalue"] = 0;
#               });
#             } else {
#               ESP_LOGI("MQTT", "IDX relais AC = 0, publication annulée.");
#             }

# globals:
#   - id: soc_min
#     type: int
#     restore_value: true
#     initial_value: '20'  # Valeur par défaut pour soc_mini
#   - id: soc_max
#     type: int
#     restore_value: true
#     initial_value: '80'  # Valeur par défaut pour soc_max
#   - id: gpio1_state
#     type: bool
#     initial_value: "false"

# binary_sensor:
#   - platform: gpio
#     pin: 2
#     name: "Heures Creuses signal Inverse"
#     id: id_gpio_heures_creuses

# select:
#   - platform: template
#     name: "Minimum SOC"
#     id: soc_min_selector
#     options:
#       - "0"
#       - "10"
#       - "20"
#       - "30"
#       - "40"
#       - "50"
#       - "60"
#       - "70"
#       - "80"
#       - "90"
#       - "100"
#     restore_value: true
#     optimistic: true
#     on_value:
#       - lambda: |-
#           id(soc_min) = std::stoi(x.c_str());  // Utilisation de std::stoi pour convertir en int
#           ESP_LOGD("select", "Nouveau soc_min: %d", id(soc_min));
#       - delay: 1s

#   - platform: template
#     name: "Maximum SOC"
#     id: soc_max_selector
#     options:
#       - "0"
#       - "10"
#       - "20"
#       - "30"
#       - "40"
#       - "50"
#       - "60"
#       - "70"
#       - "80"
#       - "90"
#       - "100"
#     restore_value: true
#     optimistic: true
#     on_value:
#       - lambda: |-
#           id(soc_max) = std::stoi(x.c_str());  // Utilisation de std::stoi pour convertir en int
#           ESP_LOGD("select", "Nouveau soc_max: %d", id(soc_max));
#       - delay: 1s

# interval:
#   - interval: 600s
#     then:
#       - lambda: |-
#           float soc = id(id_state_of_charge).state;  // Lire le SoC en float

#           if (soc <= id(soc_min) || (!id(id_gpio_heures_creuses).state && soc < id(soc_max))) {
#             id(id_relais_AC).turn_on();
#           } else {
#             id(id_relais_AC).turn_off();
#           };

#------------------------------------------------------------------------------------------------------
# a décommenter pour bms-maison
#------------------------------------------------------------------------------------------------------